Shader{
	name = "stylized_primitive.shl",
	description = [[ test normal interpolation ]],
	language = "GLSL",
	
	parameters = {
		Parameter {
				1.,
				name = "radyus", type = "float",
				description = "radius",
		},
		
		Parameter {
				{0.5},
				name = "alpha", type = "float",
				description = "alpha component",
		},
		
		
		Parameter {
				{0.5, 0.5, 0.5},
				name = "Kd", type = "vec3",
				description = "material diffuse parameter",
		},
		
		Parameter {
				{0.0, 0.0, 1.0},
				name = "viewpoint", type = "vec3",
				description = "camera view point",
		}
	},

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Vertex Program
--------------------------------------------------------------------------
Program{
	type = "vertex",
	
	[[


varying vec3 N;
varying vec3 P;
varying vec3 texCoord;
uniform float radyus;
uniform vec3 viewpoint;



vec3 closestPoint(vec3 path, vec3 start, vec3 Vpoint){
	vec3 v =  Vpoint - start;
	//v = normalize(v);
	vec3 u = normalize(path);
	vec3 pnt = dot(u, v) * u; 
	//vec3 res = start * pnt;
	return pnt;
}

vec3 siluetPoint( vec3 t1, vec3 c1, vec3 view, float sign) {
  
	vec3 p1 = closestPoint(t1, c1, view);
	vec3 u1 = p1 - view;
	
	vec3 y1 = normalize(cross(t1, u1));
	vec3 x1 = normalize(cross(t1, y1));
	
	
	float f1 = sqrt(1.0 - (radyus / length(u1)));
	
	
	vec3 ei = y1 * radyus;
	if(sign<0.0){
		ei = ei * -1.0;
	}
	vec3 siluet =  c1 + ei;

	
	float k = sqrt(1.0 - (f1*f1));
	vec3 nrm = (x1 * k);
	if(sign>0.0){
		nrm = nrm + (y1* f1);
	}
	else{
		nrm = nrm - (y1* f1);
	}
	
	N = nrm;
	return siluet; //returns the siluet point 
	
}

void main() {
	
	N = gl_NormalMatrix*normalize(gl_Normal);
	
	texCoord = gl_MultiTexCoord0.xyz;
	vec3 pnt = siluetPoint( gl_Normal.xyz, gl_Vertex.xyz, viewpoint, texCoord.x);
	
	vec4 vrt = vec4(pnt, 1.0);
	
	P = (gl_ModelViewMatrix*vrt).xyz;
	gl_Position = gl_ModelViewProjectionMatrix * vrt; 
}

	]]
},
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--	Fragment Program
--------------------------------------------------------------------------
Program{
	type = "fragment",	--must be defined

	[[
	
varying vec3 N;
varying vec3 P;
varying vec3 texCoord;
uniform float alpha;
uniform vec3 Kd;

uniform vec3 viewpoint; 

vec3 lighting( vec3 N, vec3 V, vec3 L) {
   
    vec3 Ka = Kd * 0.3;
    vec3 Ks = vec3(0.3, 0.3, 0.3);
    float shineness = 200.0;
    
    vec3 lightColor = vec3 (1.0, 1.0, 1.0);
    vec3 ambientLight = vec3(0.3, 0.3, 0.3);
    vec3 H = normalize(L+V);
    
    vec3 ambient = Ka * ambientLight;
    
    float diffuseLight = max( dot(L, N), 0.0);
    vec3 diffuse = Kd * lightColor * diffuseLight;
   
    
    float specularLight = pow( max( dot(H, N), 0.0), shineness);
    if(diffuseLight <= 0.0 ) specularLight = 0.0;
    vec3 specular = Ks * lightColor * specularLight;
    vec3 light = ambient + diffuse + specular;
    return light;
    
}




void main() {

	//below doesn't work, gets always 0
	//vec3 lightPosition = vec3(gl_LightSource[0].position);
	vec3 lightPosition = viewpoint;
	vec3 L = normalize(lightPosition - P);
	vec3 V = normalize(-P);
	vec3 N = normalize(N);
	//gl_FragColor.rgb = lighting(N, V, L);
	gl_FragColor.rgb = N;
}

	]],
},

--------------------------------------------------------------------------
}