/*
 *  hmdData.cpp
 *  hmd
 *
 *  Created by basak alper on 1/18/10.
 *  Copyright 2010 ucsb. All rights reserved.
 *
 */


#include "hmdData.h"
#include <fstream>
#include <math.h>
#include <time.h>


#define MAX(a, b) ((a)>(b)?(a):(b))

#define n 3

static double hypot2(double x, double y) {
	return sqrt(x*x+y*y);
}
// Symmetric Householder reduction to tridiagonal form.

static void tred2(double V[n][n], double d[n], double e[n]) {
	
	//  This is derived from the Algol procedures tred2 by
	//  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
	//  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
	//  Fortran subroutine in EISPACK.
	
	for (int j = 0; j < n; j++) {
		d[j] = V[n-1][j];
	}
	
	// Householder reduction to tridiagonal form.
	
	for (int i = n-1; i > 0; i--) {
		
		// Scale to avoid under/overflow.
		
		double scale = 0.0;
		double h = 0.0;
		for (int k = 0; k < i; k++) {
			scale = scale + fabs(d[k]);
		}
		if (scale == 0.0) {
			e[i] = d[i-1];
			for (int j = 0; j < i; j++) {
				d[j] = V[i-1][j];
				V[i][j] = 0.0;
				V[j][i] = 0.0;
			}
		} else {
			
			// Generate Householder vector.
			
			for (int k = 0; k < i; k++) {
				d[k] /= scale;
				h += d[k] * d[k];
			}
			double f = d[i-1];
			double g = sqrt(h);
			if (f > 0) {
				g = -g;
			}
			e[i] = scale * g;
			h = h - f * g;
			d[i-1] = f - g;
			for (int j = 0; j < i; j++) {
				e[j] = 0.0;
			}
			
			// Apply similarity transformation to remaining columns.
			
			for (int j = 0; j < i; j++) {
				f = d[j];
				V[j][i] = f;
				g = e[j] + V[j][j] * f;
				for (int k = j+1; k <= i-1; k++) {
					g += V[k][j] * d[k];
					e[k] += V[k][j] * f;
				}
				e[j] = g;
			}
			f = 0.0;
			for (int j = 0; j < i; j++) {
				e[j] /= h;
				f += e[j] * d[j];
			}
			double hh = f / (h + h);
			for (int j = 0; j < i; j++) {
				e[j] -= hh * d[j];
			}
			for (int j = 0; j < i; j++) {
				f = d[j];
				g = e[j];
				for (int k = j; k <= i-1; k++) {
					V[k][j] -= (f * e[k] + g * d[k]);
				}
				d[j] = V[i-1][j];
				V[i][j] = 0.0;
			}
		}
		d[i] = h;
	}
	
	// Accumulate transformations.
	
	for (int i = 0; i < n-1; i++) {
		V[n-1][i] = V[i][i];
		V[i][i] = 1.0;
		double h = d[i+1];
		if (h != 0.0) {
			for (int k = 0; k <= i; k++) {
				d[k] = V[k][i+1] / h;
			}
			for (int j = 0; j <= i; j++) {
				double g = 0.0;
				for (int k = 0; k <= i; k++) {
					g += V[k][i+1] * V[k][j];
				}
				for (int k = 0; k <= i; k++) {
					V[k][j] -= g * d[k];
				}
			}
		}
		for (int k = 0; k <= i; k++) {
			V[k][i+1] = 0.0;
		}
	}
	for (int j = 0; j < n; j++) {
		d[j] = V[n-1][j];
		V[n-1][j] = 0.0;
	}
	V[n-1][n-1] = 1.0;
	e[0] = 0.0;
} 

// Symmetric tridiagonal QL algorithm.

static void tql2(double V[n][n], double d[n], double e[n]) {
	
	//  This is derived from the Algol procedures tql2, by
	//  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
	//  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
	//  Fortran subroutine in EISPACK.
	
	for (int i = 1; i < n; i++) {
		e[i-1] = e[i];
	}
	e[n-1] = 0.0;
	
	double f = 0.0;
	double tst1 = 0.0;
	double eps = pow(2.0,-52.0);
	for (int l = 0; l < n; l++) {
		
		// Find small subdiagonal element
		
		tst1 = MAX(tst1,fabs(d[l]) + fabs(e[l]));
		int m = l;
		while (m < n) {
			if (fabs(e[m]) <= eps*tst1) {
				break;
			}
			m++;
		}
		
		// If m == l, d[l] is an eigenvalue,
		// otherwise, iterate.
		
		if (m > l) {
			int iter = 0;
			do {
				iter = iter + 1;  // (Could check iteration count here.)
				
				// Compute implicit shift
				
				double g = d[l];
				double p = (d[l+1] - g) / (2.0 * e[l]);
				double r = hypot2(p,1.0);
				if (p < 0) {
					r = -r;
				}
				d[l] = e[l] / (p + r);
				d[l+1] = e[l] * (p + r);
				double dl1 = d[l+1];
				double h = g - d[l];
				for (int i = l+2; i < n; i++) {
					d[i] -= h;
				}
				f = f + h;
				
				// Implicit QL transformation.
				
				p = d[m];
				double c = 1.0;
				double c2 = c;
				double c3 = c;
				double el1 = e[l+1];
				double s = 0.0;
				double s2 = 0.0;
				for (int i = m-1; i >= l; i--) {
					c3 = c2;
					c2 = c;
					s2 = s;
					g = c * e[i];
					h = c * p;
					r = hypot2(p,e[i]);
					e[i+1] = s * r;
					s = e[i] / r;
					c = p / r;
					p = c * d[i] - s * g;
					d[i+1] = h + s * (c * g + s * d[i]);
					
					// Accumulate transformation.
					
					for (int k = 0; k < n; k++) {
						h = V[k][i+1];
						V[k][i+1] = s * V[k][i] + c * h;
						V[k][i] = c * V[k][i] - s * h;
					}
				}
				p = -s * s2 * c3 * el1 * e[l] / dl1;
				e[l] = s * p;
				d[l] = c * p;
				
				// Check for convergence.
				
			} while (fabs(e[l]) > eps*tst1);
		}
		d[l] = d[l] + f;
		e[l] = 0.0;
	}
	
	// Sort eigenvalues and corresponding vectors.
	
	for (int i = 0; i < n-1; i++) {
		int k = i;
		double p = d[i];
		for (int j = i+1; j < n; j++) {
			if (d[j] < p) {
				k = j;
				p = d[j];
			}
		}
		if (k != i) {
			d[k] = d[i];
			d[i] = p;
			for (int j = 0; j < n; j++) {
				p = V[j][i];
				V[j][i] = V[j][k];
				V[j][k] = p;
			}
		}
	}
}



HmdData :: HmdData()
:	crr_time(0)
{
	//initiate data fields
	//memset(resmpDat,0, 43200 * sizeof(HmdDataNode));
}

HmdData :: ~HmdData()
{
	//delete dynamic arrays
}

typedef vector<string> StringVector;

StringVector stringsFrom( string s )
{
	replace( s.begin(), s.end(), ',', ' ' );
	istringstream stream(s);
	StringVector result;
	
	for( ;; )
	{
		string word;
		if( !( stream >> word ) ) { break; }
		result.push_back( word );
	}
	return result;
}

tm initTm() {
    time_t rawTime;
    ::time(&rawTime);
    return *::localtime(&rawTime);
}



void HmdData :: loadData(const char * filePath){
	//printf("Start loading file \n");
	ifstream file;
	file.open(filePath);
	printf("filename : %s \n", filePath);
	if (!file){
		printf("Error in openening file in hmd \n");
	}
	
	
	string o = filePath;
	o = o.substr(67, 19);
	//printf("sub str: %s \n",  o.c_str());
	
	string copy = filePath;
	string of = copy.substr(0,50);
	string dir = "resampled/";
	of.append(dir);
	of.append(o);
	
	printf("outfile: %s \n",  of.c_str());
	
	ofstream file_out;
	file_out.open(of.c_str());
	
	if (!file_out){
		printf("output file has not been created \n");
	}
	
	
	string s;
	getline(file,s);
	
	string part1,part2;
	int year, month, day, hour, mint, sec;
	
	
	float crr_bid = 0;
	float crr_ask = 0;
	
	time_t crrtime;
	time_t timeslot;
	
	tm timeinfo;
	tm timesl;

	timeinfo = initTm();
	timesl = initTm();
	
	file >> part1 >> part2;
	//printf("parts: %s -- %s \n", part1.c_str(), part2.c_str() );
	
	StringVector sv1 = stringsFrom(part1);
	StringVector sv2 = stringsFrom(part2);
	
	//printf("parts: %s, %s \n", sv1[2].c_str(), sv2[2].c_str());
	
	//int idd = atoi(sv1[0].c_str());
	
	string yr = sv1[2].substr(0,4); year = atoi(yr.c_str());
	string mn = sv1[2].substr(5,2); month = atoi(mn.c_str());
	string dy = sv1[2].substr(8,2); day = atoi(dy.c_str());
	
	string hr = sv2[0].substr(0,2); hour = atoi(hr.c_str());
	string mt = sv2[0].substr(3,2); mint = atoi(mt.c_str());
	string sc = sv2[0].substr(6,2); sec = atoi(sc.c_str());
	
	timesl.tm_year = year - 1900;
	timesl.tm_mon = month-1;
	timesl.tm_mday = day;
	
	timesl.tm_hour = 17;
	timesl.tm_min = 0;
	timesl.tm_sec = 10;
	
		
	timeslot = timegm(&timesl);
	
	//printf("begin hour, min, sec : %i, %i, %i \n", timesl.tm_hour, timesl.tm_min, timesl.tm_sec );
	
    crr_bid = atof(sv2[1].c_str());
	crr_ask = atof(sv2[2].c_str());
	
	//printf("times sec %i, %i \n", timesl.tm_sec, timeinfo.tm_sec);

	
	int linenum = 1;
	
	while (!file.eof( )){ 
	//while (linenum < 100){ 
		
		file >> part1 >> part2;
		//printf("parts: %s -- %s \n", part1.c_str(), part2.c_str() );
		
		sv1 = stringsFrom(part1);
		sv2 = stringsFrom(part2);
		
		//printf("parts: %s, %s \n", sv1[2].c_str(), sv2[2].c_str());

		//int idd = atoi(sv1[0].c_str());
		
		yr = sv1[2].substr(0,4); year = atoi(yr.c_str());
		mn = sv1[2].substr(5,2); month = atoi(mn.c_str());
		dy = sv1[2].substr(8,2); day = atoi(dy.c_str());
		
		hr = sv2[0].substr(0,2); hour = atoi(hr.c_str());
		mt = sv2[0].substr(3,2); mint = atoi(mt.c_str());
		sc = sv2[0].substr(6,2); sec = atoi(sc.c_str());
		
						
		timeinfo.tm_year = year - 1900;
		timeinfo.tm_mon = month - 1;
		timeinfo.tm_mday = day;
		
		timeinfo.tm_hour = hour;
		timeinfo.tm_min = mint;
		timeinfo.tm_sec = sec;
		
		crrtime = timegm(&timeinfo);
		
		
				
		//printf("values at line %i, %f, %f \n", linenum, crr_bid, crr_ask);
		
		//printf("hour: %i \n", timesl.tm_hour );

		while (crrtime>timeslot) {
			
			file_out << 1900+timesl.tm_year <<" "<< 1 + timesl.tm_mon <<" "<< timesl.tm_mday <<" "<< timesl.tm_hour <<" "<< timesl.tm_min <<" "<< timesl.tm_sec <<" "<<  crr_bid <<" "<<  crr_ask <<"\n";
			timesl.tm_sec += 10.0;
			timeslot = timegm(&timesl);
		}
		 
		crr_bid = atof(sv2[1].c_str());
		crr_ask = atof(sv2[2].c_str());

		
		//HmdDataNode dn = HmdDataNode(year, month, day, hour, mint, sec, val1, val2);
		//allDat.push_back(dn);
		
		linenum ++;
		
	}
    
	file.close();
	file_out.close();
		
	
}



void HmdData::plotParticle(int cnt){
	glPointSize(0.5);
	glColor3f(1.0, 0.4, 0.4);
	
	glBegin(GL_POINTS);

	for (int d=0; d<allDat.size(); d++) {
		float timecode = allDat[d].day * DAYCN + allDat[d].hour * HOURCN + allDat[d].mint * MINCN + allDat[d].sec;
		timecode = timecode / 10000;
		glVertex3f(timecode, (allDat[d].v1 * 0.2), 0.0);
		
	}
	
	glEnd();
	
	/*glColor3f(0.3, 0.4, 1.0);
	glPointSize(1.5);
	
	glBegin(GL_POINTS);
	for (int i=0; i<43200; i++) {
		float xpos = i / 1000.0; 
		//printf("values %f, %f \n", xpos, resmpDat[i][0]);
		glVertex3f(xpos+40.68, resmpDat[i][0]*0.2, 0.0);
		
	}
	glEnd();
    
	*/	
}

void HmdData::eigen_decomposition(double A[n][n], double V[n][n], double d[n]) {
	double e[n];
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			V[i][j] = A[i][j];
		}
	}
	tred2(V, d, e);
	tql2(V, d, e);
}

