/*
 *  lua_hmd_udata.h
 *  hmd
 *
 *  Created by basak alper on 1/18/10.
 *  Copyright 2010 ucsb. All rights reserved.
 *
 */

#ifndef HMD_UDATA_LUA_UDATA_H
#define HMD_UDATA_LUA_UDATA_H 1

#ifdef __cplusplus
extern "C" {
#endif
	
#include "lua.h"
#include "lauxlib.h"
	
#ifdef __cplusplus
}
#endif

#include "hmd_module.h"

namespace udata {
	
	// calculates btye offset of casting up the hierarchy
	//	class Superclass {
	//	public:
	//		const char *name;
	//		Cast *cast;
	//	};
	
	struct LuaMethod {
	public:
		enum MethodType {
			METHOD = 0,
			GET,
			SET,
			GETSET,
		};
		
		const char *name;
		lua_CFunction func;
		MethodType type;
	};
	
	template <class T>
	class Udata {
		typedef T *TID;
		
	public:
		
		
		/*
		 Current solution for dealing with multiple inheritance:
		 
		 Consider the following
		 
		 class A;
		 class B;
		 class C : A, B;
		 
		 if all classes have udata, when getting a C pointer within a B udata
		 function, C++ will not know that the pointer was originally a C* 
		 since it will have gone through a void*.  Thus, we need to cache 
		 somehere the pointer offset from C* -> B*.
		 */
		class Cast {
		public:
			virtual int cast() = 0;
		};
		
		template<class B>
		class Cast_op : public Cast {
		public:
			virtual int cast() {
				T t;
				char *p1 = (char *)&t;
				char *p2 = (char *)((B *)&t);
				return p2 - p1;
			}
		};
		
		Udata()
		: mL(0)
		{}
		
		virtual ~Udata() {};
		
		static void * check_udata(lua_State *L, int ud);
		static int check_equality(lua_State *L);
		static TID to_udata(lua_State *L, int index);
		static const char * classname(lua_State *L, int index);
		static TID * udata_push(lua_State *L, T *obj);
		static int init_udata(lua_State *L);
		static int setup_functions(lua_State *L);
		static int inherit(lua_State *L);
		
		static bool is_prototype(lua_State *L);
		static int udata__prototype(lua_State *L, T *x);
		static int Udata___index(lua_State *L);
		static int Udata___newindex(lua_State *L);
		static int Udata___gc(lua_State *L);
		static int Udata___tostring(lua_State *L);
		static int Udata___call(lua_State *L);
		
		static int stackDump(lua_State *L) {
			int i;
			int top = lua_gettop(L);
			
			printf("stack dump %d:\n", top);
			for(i=top; i >= 1; i--) {
				int t = lua_type(L, i);
				
				switch(t)
				{
					case LUA_TSTRING:
						printf("%d \t'%s' string\n", i, lua_tostring(L, i));
						break;
						
					case LUA_TBOOLEAN:
						printf(lua_toboolean(L, i) ? "\ttrue\n" : "\tfalse\n");
						break;
						
					case LUA_TNUMBER:
						printf("%d \t'%f' number\n", i, lua_tonumber(L, i));
						break;
						
					case LUA_TLIGHTUSERDATA:
						printf("%d \t'%x'\n", i, lua_touserdata(L, i));
						break;
						
					case LUA_TUSERDATA:
						//	printf("%d ", i);
						//	lua_getglobal(L, "print");
						//	lua_pushvalue(L, i);
						//	lua_call(L, 1, 0);
						printf("%d \t'%x %s'\n", i, lua_touserdata(L, i), T::name);
						break;
						
					case LUA_TFUNCTION:
						printf("%d \t'func: %x'\n", i, lua_tocfunction(L, i));
						break;
						
					case LUA_TTABLE:
						printf("%d table\n", i);
						//							lua_getglobal(L, "print");
						//							lua_pushvalue(L, i);
						//							lua_call(L, 1, 0);
						break;
						
					default:
						printf("%d \t'%s'\n", i, lua_typename(L, t));
						break;
				}
			}
			
			return 0;
		}
		
		static int null_udata(lua_State *L, T *o);
		static int instance_to_userdata(lua_State *L, T *o);
		
		virtual void setState(lua_State * L) { 
			if (L == 0) {
				mL = 0;
			} else {
				lua_getfield(L, LUA_REGISTRYINDEX, "L");
				mL = lua_tothread(L, -1);
				lua_pop(L, 1);
			}
		}
		virtual lua_State * getState() {return mL;}
		
	protected:
		static const luaL_reg Udata_lib_meta[];
		
		lua_State *mL;
		
	};
	
	template <class T>
	void * Udata<T> :: check_udata(lua_State *L, int ud) {
		void *p = lua_touserdata(L, ud);
		if (p != NULL && lua_getmetatable(L, ud)) {
			lua_pushlightuserdata(L, (void *)T::name);
			lua_rawget(L, -2);
			
			if(!lua_isnil(L, -1)) {
				lua_pop(L, 2);
				return p;
			}
			
			lua_pop(L, 2);
		}
		
		return NULL;
	}
	
	// -1 is the constant
	// -2 changes based on __super
	template <class T>
	int Udata<T> :: check_equality(lua_State *L) {
		// quick check of equality
		int equal = 0;
		
		lua_pushlightuserdata(L, (void *)T::name);
		lua_rawget(L, -2);
		
		if(!lua_isnil(L, -1)) {
			equal = 1;
		}
		lua_pop(L, 1);
		
		return equal;
	}
	
	template <class T>
	typename Udata<T>::TID Udata<T> :: to_udata(lua_State *L, int index) {
		TID *p_obj = (TID *)check_udata(L, index);
		if(p_obj)	return *p_obj;
		else		return NULL;
	}
	
	template <class T>
	const char * Udata<T> :: classname(lua_State *L, int index) {
		if(lua_getmetatable(L, index)) {
			lua_getfield(L, -1, "__name");
			const char *name = (lua_type(L, -1) == LUA_TSTRING) ? lua_tostring(L, -1) : NULL;
			lua_pop(L, 2);
			return name;
		}
		else {
			return NULL;
		}
	}
	
	template <class T>
	typename Udata<T>::TID * Udata<T> :: udata_push(lua_State *L, T *obj) {
		if(obj) {
			obj->setState(L);
			
			luaL_getmetatable(L, HMD_UDATA_LIB_META);
			
			// check instances field in metatable
			lua_pushstring(L, HMD_UDATA_INSTANCES_METAFIELD);
			lua_rawget(L, -2);					// get instances table
			lua_pushinteger(L, (LUA_INTEGER)obj);
			lua_rawget(L, -2);					// get this instance's field
			
			if(lua_isnil(L, -1)) {
				lua_pop(L, 1);		// pop nil from stack
				lua_pushinteger(L, (LUA_INTEGER)obj);
				
				T **p_obj = (T **)lua_newuserdata(L, sizeof(TID));
				*p_obj = obj;
				
				lua_pushvalue(L, -1);
				lua_insert(L, -4);
				lua_rawset(L, -3);
				
				lua_pop(L, 1);					// pop instances from stack
				lua_remove(L, -2);
				
				luaL_getmetatable(L, T::name);
				lua_setmetatable(L, -2);
				
				lua_newtable(L);
				lua_setfenv(L, -2);
				
				return p_obj;
			}
			else {
				lua_insert(L, -3);
				lua_pop(L, 2);
				
				return (T **)luaL_checkudata(L, -1, T::name);
			}
		}
		else {
			lua_pushnil(L);
			return 0;
		}
	}
	
	template <class T>
	bool Udata<T> :: is_prototype(lua_State *L) {
		return lua_istable(L, 1) == 1;
	}
	
	template <class T>
	int Udata<T> :: udata__prototype(lua_State *L, T *x) {
		if(lua_istable(L, 1)) {
			udata_push(L, x);
			
			// we have a prototype table, iterator through it and set values
			lua_getmetatable(L, -1);
			lua_pushstring(L, "setters");
			lua_rawget(L, -2);
			
			lua_pushstring(L, "__newindex");
			lua_rawget(L, -3);
			int t = lua_gettop(L);
			
			// table is in the stack at index 't'
			lua_pushnil(L);  // first key
			while (lua_next(L, 1) != 0) {
				// uses 'key' (at index -2) and 'value' (at index -1)
				lua_pushvalue(L, t);
				lua_pushvalue(L, 2);
				lua_pushvalue(L, -4);
				lua_pushvalue(L, -4);
				lua_call(L, 3, 0);
				
				// removes 'value'; keeps 'key' for next iteration
				lua_pop(L, 1);
			}
			
			lua_pop(L, 3);
			return 1;
		}
		//or userdata with __type
		
		return 0;
	}
	
	
	template <class T>
	int Udata<T> :: Udata___index(lua_State *L) {
		lua_getfenv(L, 1);				//get userdata environment
		lua_pushvalue(L, 2);
		lua_rawget(L, -2);				//check environment table for field
		
		if(lua_isnil(L, -1)) {
			lua_getmetatable(L, 1);		//get userdata metatable
			lua_pushvalue(L, 2);
			lua_rawget(L, -2);			//check metatable for field
			
			if(lua_isnil(L, -1)) {
				lua_pop(L, 1);
				lua_pushstring(L, "getters");
				lua_rawget(L, -2);
				
				lua_pushvalue(L, 2);
				lua_rawget(L, -2);		//check metatable for field
				
				//if nil, check in env table
				if(lua_iscfunction(L, -1)) {
					lua_pushvalue(L, 1);
					int err = lua_pcall(L, 1, 1, 0);
					if(err) {
						luaL_error(L, "error indexing %s.%s: %s\n",
								   T::name,
								   lua_tostring(L, 2),
								   lua_tostring(L, -1));
						lua_pop(L, 1);
						return 0;
					}
				}
			}
		}
		
		return 1;
	}
	
	template <class T>
	int Udata<T> :: Udata___newindex(lua_State * L) {
		if(lua_isfunction(L, 3)) {
			//put function in environment table
			lua_getfenv(L, 1);			//get userdata environment
			
			lua_pushvalue(L, 2);
			lua_pushvalue(L, 3);
			lua_rawset(L, -3);
			
			lua_pop(L, 1);
		}
		else {
			lua_getmetatable(L, 1);		//get userdata metatable
			lua_pushstring(L, "setters");
			lua_gettable(L, -2);
			lua_pushvalue(L, 2);
			lua_rawget(L, -2);
			
			if(lua_iscfunction(L, -1)) {
				lua_pushvalue(L, 1);
				lua_pushvalue(L, 3);
				int err = lua_pcall(L, 2, 0, 0);
				if(err) {
					luaL_error(L, "error indexing %s.%s: %s\n",
							   T::name,
							   lua_tostring(L, 2),
							   lua_tostring(L, -1));
					lua_pop(L, 1);
				}
				lua_pop(L, 3);
			}
			else {
				lua_pop(L, 3);
				
				lua_getfenv(L, 1);		//get userdata environment
				lua_pushvalue(L, 2);
				lua_pushvalue(L, 3);
				lua_rawset(L, -3);
				
				lua_pop(L, 1);
			}
		}
		
		return 0;
	}
	
	template <class T>
	int Udata<T> :: Udata___gc(lua_State *L) {
		TID o = to_udata(L, 1);
		if(o) {
			o->setState(0);
			delete o;
		}
		
		return 0;
	}
	
	template <class T>
	int Udata<T> :: Udata___tostring(lua_State *L) {
		TID o = to_udata(L, 1);
		lua_pushfstring(L, "%p %s", o, T::name);
		
		return 1;
	}
	
	template <class T>
	int Udata<T> :: Udata___call(lua_State *L) {
		lua_getfield(L, 1, "new");
		lua_replace(L, 1);		//put constructor at index 1
		lua_call(L, lua_gettop(L)-1, 1);
		
		return 1;
	}
	
	template <class T>
	int Udata<T> :: null_udata(lua_State *L, T *o) {
		luaL_getmetatable(L, HMD_UDATA_LIB_META);
		lua_pushstring(L, HMD_UDATA_INSTANCES_METAFIELD);
		lua_rawget(L, -2);					//get instances table
		lua_pushinteger(L, (LUA_INTEGER)o);
		lua_rawget(L, -2);					//get this instance's field
		
		if(!lua_isnil(L, -1)) {
			//have to null out the userdata value
			TID *p_obj = (TID *)luaL_checkudata(L, -1, T::name);
			*p_obj = NULL;
		}
		
		return 0;
	}
	
	//might be better ro rearchitect instances to be ABELIAN_wide
	//clearing stack properly?
	template <class T>
	int Udata<T> :: instance_to_userdata(lua_State *L, T *o) {
		luaL_getmetatable(L, HMD_UDATA_LIB_META);
		lua_pushstring(L, HMD_UDATA_INSTANCES_METAFIELD);
		lua_rawget(L, -2);					//get instances table
		lua_pushinteger(L, (int)o);
		lua_rawget(L, -2);					//get this instance's field
		
		lua_remove(L, -2);
		lua_remove(L, -2);
		
		return 1;
	}
	
	template <class T>
	const luaL_reg Udata<T>::Udata_lib_meta[] = {
		{"__index", Udata<T>::Udata___index},
		{"__newindex", Udata<T>::Udata___newindex},
		{"__gc", Udata<T>::Udata___gc},
		{"__tostring", Udata<T>::Udata___tostring},
		{NULL, NULL}
	};
	
	template <class T>
	int Udata<T> :: init_udata(lua_State *L) {
		lua_getglobal(L, HMD_MODULE_NAME);
		luaL_newmetatable(L, T::name);
		
		// setup constructor
		lua_newtable(L);
		lua_pushstring(L, "__call");
		lua_pushcfunction(L, Udata<T>::Udata___call);
		lua_settable(L, -3);
		lua_pushstring(L, "__name");
		lua_pushstring(L, T::name);
		lua_settable(L, -3);
		lua_setmetatable(L, -2);	// set as metatable for __call
		
		// setup introspection
		lua_pushstring(L, "__name");
		lua_pushstring(L, T::name);
		lua_settable(L, -3);
		
		setup_functions(L);		// udata generic functions and class functions
		inherit(L);				// superclass functions
		
		// set as field in table
		lua_pushstring(L, T::name);
		lua_insert(L, -2);
		lua_settable(L, -3);
		lua_pop(L, 1);
		
		return 0;
	}
	
	template <class T>
	int Udata<T> :: setup_functions(lua_State *L) {
		luaL_register(L, 0, Udata<T>::Udata_lib_meta);
		
		// add attrs table (return values, not functions)
		lua_pushstring(L, "getters");
		lua_newtable(L);
		lua_rawset(L, -3);
		
		lua_pushstring(L, "setters");
		lua_newtable(L);
		lua_rawset(L, -3);
		
		const LuaMethod *class_lib = T::getLuaMethods();
		int i=0;
		
		while(class_lib[i].name) {
			switch(class_lib[i].type) {
					// returns a function to be operated on by the paren operator ()
				case LuaMethod::METHOD:
					lua_pushstring(L, class_lib[i].name);
					lua_pushcfunction(L, class_lib[i].func);
					lua_rawset(L, -3);
					break;
					
					// returns a value only
				case LuaMethod::GET:
					lua_getfield(L, -1, "getters");
					lua_pushstring(L, class_lib[i].name);
					lua_pushcfunction(L, class_lib[i].func);
					lua_rawset(L, -3);
					lua_pop(L, 1);
					break;
					
					// sets a value only
				case LuaMethod::SET:
					lua_getfield(L, -1, "setters");
					lua_pushstring(L, class_lib[i].name);
					lua_pushcfunction(L, class_lib[i].func);
					lua_rawset(L, -3);
					lua_pop(L, 1);
					break;
					
					// returns or sets a value
				case LuaMethod::GETSET:
					lua_getfield(L, -1, "getters");
					lua_pushstring(L, class_lib[i].name);
					lua_pushcfunction(L, class_lib[i].func);
					lua_rawset(L, -3);
					lua_pop(L, 1);
					
					lua_getfield(L, -1, "setters");
					lua_pushstring(L, class_lib[i].name);
					lua_pushcfunction(L, class_lib[i].func);
					lua_rawset(L, -3);
					lua_pop(L, 1);
					break;
			}
			i++;
		}
		
		return 0;
	}
	
	template <class T>
	int Udata<T> :: inherit(lua_State *L) {
		lua_pushlightuserdata(L, (void *)T::name);
		lua_pushboolean(L, true);
		lua_rawset(L, -3);
		
		int k=0;
		const char **superTable = T::getSuperclassTable();
		while(superTable[k]) {
			lua_pushlightuserdata(L, (void *)superTable[k]);
			lua_pushboolean(L, true);
			lua_rawset(L, -3);
			
			// put methods of metatable in as well
			luaL_getmetatable(L, superTable[k]);
			if(!lua_isnil(L, -1)) {
				// table is in the stack at index 't'
				lua_pushnil(L);  // first key
				while (lua_next(L, -2) != 0) {
					// uses 'key' (at index -2) and 'value' (at index -1)
					if(lua_isfunction(L, -1)) {		// want to transfer superclass tables
						if(lua_isstring(L, -2)) {	// get string value of key
							const char *name = lua_tostring(L, -2);
							if(name[0] != '_' && name[1] != '_')  {		// not a reserved __meta field
								luaL_getmetatable(L, T::name);
								lua_pushvalue(L, -3);
								lua_rawget(L, -2);
								
								if(lua_isnil(L, -1)) {	// doesn't already exist in table
									lua_pop(L, 1);		// pop nil
									lua_pushvalue(L, -3);
									lua_pushvalue(L, -3);
									lua_rawset(L, -3);
									lua_pop(L, 1);
								}
								else {
									lua_pop(L, 2);
								}
							}
						}
					}
					
					// removes 'value'; keeps 'key' for next iteration
					lua_pop(L, 1);
				}
				
			}
			lua_pop(L, 1);
			
			k++;
		}
		
		return 0;
	}
	
}	// udata::

#endif	// HMD_UDATA_LUA_UDATA_H


