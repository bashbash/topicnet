/*
 *  hmdData_udata.cpp
 *  hmd
 *
 *  Created by basak alper on 1/18/10.
 *  Copyright 2010 ucsb. All rights reserved.
 *
 */

#include "hmdData_udata.h"



void * HmdData_udata_to_udata(lua_State *L, int idx) {
	return HmdData_udata::to_udata(L, idx);
}

void * HmdData_udata_to_base(lua_State *L, int idx) {
	return (HmdData *)HmdData_udata::to_udata(L, idx);
}

const char * HmdData_udata :: name = "HmdData";
const char * HmdData_udata::superclass_table[] = {NULL};

#define LUA_METHOD(name, type) {#name, Self::name, udata::LuaMethod::type}

const udata::LuaMethod HmdData_udata :: lua_methods[] = {
	{"new", Self::__new, udata::LuaMethod::METHOD},
	LUA_METHOD(loadData, METHOD),
	LUA_METHOD(plotParticle, METHOD), 
	LUA_METHOD(eigen_decomposition, METHOD),
		
	{0, 0, (udata::LuaMethod::MethodType)0}
};

#undef LUA_METHOD

HmdData_udata :: HmdData_udata()
: HmdData()
{}

HmdData_udata :: ~HmdData_udata()
{}

int HmdData_udata :: __new(lua_State *L) {
	Self *s = new Self();
	Self::udata_push(L, s);
	
	return 1;
}

int HmdData_udata :: loadData(lua_State *L) {
	Self *s = Self::to_udata(L, 1);
	if(s) {
		
		const char *filePath = lua_tostring(L, 2);
		s->Base::loadData(filePath);
		
		
	}
	else{
		luaL_error(L, "HmdData.loadData: invalid object or arguments");
	}
	return 0;
}

int HmdData_udata :: plotParticle(lua_State *L) {
	Self *s = Self::to_udata(L, 1);
	if(s) {
		
		int prt = lua_tonumber(L, 2);
		s->Base::plotParticle(prt);
		
		
	}
	else{
		luaL_error(L, "HmdData.plotParticle: invalid object or arguments");
	}
	return 0;
}

int HmdData_udata :: eigen_decomposition(lua_State *L) {
	Self *s = Self::to_udata(L, 1);
	if(s) {
		
		lua_rawgeti(L, 2, 1);
		lua_rawgeti(L, 2, 2);
		lua_rawgeti(L, 2, 3);
		lua_rawgeti(L, 2, 4);
		lua_rawgeti(L, 2, 5);
		lua_rawgeti(L, 2, 6);
		double a = lua_tonumber(L, -6);
		double b = lua_tonumber(L, -5);
		double c = lua_tonumber(L, -4);
		double dd = lua_tonumber(L, -3);
		double e = lua_tonumber(L, -2);
		double f = lua_tonumber(L, -1);
		lua_pop(L, 6);
		
		//printf("passed in %f, %f, %f, %f, %f, %f \n", a, b, c, dd, e, f);
		
		//printf("called eigen decompose \n");
		double A[3][3]; 
		A[0][0] = a;
		A[0][1] = b;
		A[0][2] = c;
		
		A[1][0] = b;
		A[1][1] = dd;
		A[1][2] = e;
		
		A[2][0] = c;
		A[2][1] = e;
		A[2][2] = f;
		
		
		double V[3][3]; 
		double d[3];
		//int prt = lua_tonumber(L, 2);
		s->Base::eigen_decomposition(A, V, d);
		
		//column major
		/*
		printf("eigen vec1 %f, %f, %f \n", V[0][0], V[1][0], V[2][0]);
		printf("eigen vec2 %f, %f, %f \n", V[0][1], V[1][1], V[2][1]);
        printf("eigen vec3 %f, %f, %f \n", V[0][2], V[1][2], V[2][2]);
		*/
		//row major
		printf("eigen vec1 %f, %f, %f \n", V[0][0], V[1][0], V[2][0]);
		printf("eigen vec2 %f, %f, %f \n", V[0][1], V[1][1], V[2][1]);
        printf("eigen vec3 %f, %f, %f \n", V[0][2], V[1][2], V[2][2]);
		
		/*
		lua_newtable(L);
		lua_pushnumber(L, V[0][0]);
		lua_rawseti(L, -2, 1);
		lua_pushnumber(L, V[1][0]);
		lua_rawseti(L, -2, 2);
		lua_pushnumber(L, V[2][0]);
		lua_rawseti(L, -2, 3);
		
		
		lua_pushnumber(L, V[0][1]);
		lua_rawseti(L, -2, 4);
		lua_pushnumber(L, V[1][1]);
		lua_rawseti(L, -2, 5);
		lua_pushnumber(L, V[2][1]);
		lua_rawseti(L, -2, 6);
		
		
		lua_pushnumber(L, V[0][2]);
		lua_rawseti(L, -2, 7);
		lua_pushnumber(L, V[1][2]);
		lua_rawseti(L, -2, 8);
		lua_pushnumber(L, V[2][2]);
		lua_rawseti(L, -2, 9);
		*/
		
		lua_newtable(L);
		lua_pushnumber(L, V[0][0]);
		lua_rawseti(L, -2, 1);
		lua_pushnumber(L, V[0][1]);
		lua_rawseti(L, -2, 2);
		lua_pushnumber(L, V[0][2]);
		lua_rawseti(L, -2, 3);
		
		
		lua_pushnumber(L, V[1][0]);
		lua_rawseti(L, -2, 4);
		lua_pushnumber(L, V[1][1]);
		lua_rawseti(L, -2, 5);
		lua_pushnumber(L, V[1][2]);
		lua_rawseti(L, -2, 6);
		
		
		lua_pushnumber(L, V[2][0]);
		lua_rawseti(L, -2, 7);
		lua_pushnumber(L, V[2][1]);
		lua_rawseti(L, -2, 8);
		lua_pushnumber(L, V[2][2]);
		lua_rawseti(L, -2, 9);
		return 1;

		
		
	}
	else{
		luaL_error(L, "HmdData.eigen_decomposition: works only for 3 by 3 symmetric input matrices");
	}
	return 0;
}


