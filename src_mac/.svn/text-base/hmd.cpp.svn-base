
#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"

extern int luaopen_hmd(lua_State * L);

#ifdef __cplusplus
}
#endif


//int lua_print(lua_State * L) {
//
//	const char * str = lua_tostring(L, 1);
//	printf("%s\n", str);
//	
//	return 0;
//}


/*
	add(a, b)
	expects two numbers on the top of the stack,
	returns their sum
*/
int lua_add(lua_State * L) {

	double a, b, sum;
	a = lua_tonumber(L, 1); // first argument
	b = lua_tonumber(L, 2); // second argument
	
	sum = a + b;
	
	lua_pushnumber(L, sum);
	return 1; // one return value

}


// take one arg: number of squares
// return: table of squares
int lua_foo(lua_State * L) {
	int count = luaL_checkint(L, 1);	// stack index 1 
	
	lua_createtable(L, count, 0);		// stack index 2
	
	for (int i=1; i<=count; i++) {
		double s = i*i;
		lua_pushinteger(L, i);			// stack index 3 (key)
		lua_pushnumber(L, s);			// stack index 4 (value)
		// lua_settable treats stack index -1(top) as value, -2 as key
		lua_settable(L, 2);				// table[key] = value    
	}

	return 1;
}
	
//											// stack:
//	lua_pushcfunction(L, lua_print);		// 1(-1): lua_print
//	lua_pushstring(L, "four");				// 1(-2): lua_print		2(-1):four
//	lua_call(L, 1, 0);						// 
//	



/* entry point from Lua (found by require("hmd")) */
int luaopen_hmd(lua_State * L) {

	luaL_Reg lib[] = {
		{ "add", lua_add },
		{ "foo", lua_foo },
		{ NULL, NULL }
	};
	
	luaL_register(L, "hmd", lib);

	return 1; /* one return value (the module table) */
}











